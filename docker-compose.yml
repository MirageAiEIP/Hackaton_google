services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg16
    container_name: samu-ai-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: samu
      POSTGRES_PASSWORD: samu_password
      POSTGRES_DB: samu_triage
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U samu -d samu_triage']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - samu-network

  # Application Backend
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: samu-ai-backend
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8080
      LOG_LEVEL: info
      # CORS origins for staging/production (comma-separated)
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-}
      # Database & Redis (local Docker development)
      DATABASE_URL: postgresql://samu:samu_password@postgres:5432/samu_triage
      REDIS_URL: redis://redis:6379
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 100
      # Google Cloud Secret Manager
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      USE_SECRET_MANAGER: ${USE_SECRET_MANAGER:-false}
      # JWT configuration (expiry only, secrets loaded from Secret Manager)
      JWT_ACCESS_TOKEN_EXPIRY: ${JWT_ACCESS_TOKEN_EXPIRY:-15m}
      JWT_REFRESH_TOKEN_EXPIRY: ${JWT_REFRESH_TOKEN_EXPIRY:-7d}
      # Cookie configuration
      COOKIE_DOMAIN: ${COOKIE_DOMAIN:-localhost}
      COOKIE_SECURE: ${COOKIE_SECURE:-false}
      # Public URL for webhooks
      PUBLIC_API_URL: ${PUBLIC_API_URL:-}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - samu-network
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8080/health/live',
        ]
      interval: 30s
      timeout: 3s
      retries: 3

  # Redis (for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: samu-ai-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - samu-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  samu-network:
    driver: bridge
